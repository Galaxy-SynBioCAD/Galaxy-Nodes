<tool id="rpbasicdesign" name="DNA-BOT input files from rpSBML" version="0.1.0">
  <description>Build DNA-BOT input files from rpSBML</description>
  <requirements>
    <requirement type="package" version="0.1.1">rpbasicdesign</requirement>
  </requirements>
  <command detect_errors="exit_code"><![CDATA[
      python -m rpbasicdesign.cli
	  --rpsbml_file '$rpsbml_file'
    #if $adv.linker_parts_file
      --linker_parts_file '$adv.linker_parts_file'
    #end if
    #if $adv.linker_plate_file
      --linker_plate_file '$adv.linker_plate_file'
    #end if
    #if $adv.user_parts_file
      --user_parts_file '$adv.user_parts_file'
    #end if
    #if str($adv.construct_type) == "monocistronic":
      --monocistronic true
    #else
      --monocistronic false
    #end if
    --lms_id '$adv.lms_id'
    --lmp_id '$adv.lmp_id'
    --backbone_id '$adv.backbone_id'
    --sample_size '$adv.sample_size'
	  --o_dnabot_dir 'out/dnabot_in'
    --o_sbol_dir 'out/sbol_export'
  ]]></command>
  <inputs>
    <param type="data" name="rpsbml_file" label="rpSBML file" format="xml" />
    <section name="adv" title="Advanced Options" expanded="false">
      <param type="data" name="linker_parts_file" optional="true" label="Linker parts file" format="csv" />
      <param type="data" name="linker_plate_file" optional="true" label="Linker plate file" format="csv" />
      <param type="data" name="user_parts_file" optional="true" label="User parts file" format="csv" />
      <param name="construct_type" type="select" label="Construct type">
        <option value="monocistronic" type="text" >monocistronic</option>
        <option value="polycistronic" type="text" selected="true">polycistronic</option>
      </param>
      <param name="lms_id" type="text" value="LMS" label="LMS part ID" />
      <param name="lmp_id" type="text" value="LMP" label="LMP part ID" />
      <param name="backbone_id" type="text" value="BASIC_SEVA_37_CmR-p15A.1" label="Backbone part ID" />
      <param name="sample_size" type="integer" value="3" label="Number of construct to generate" />
    </section>
  </inputs>
  <outputs>
    <collection type="list" format="csv" name="dnabot_dir" label="Dataset for DNA-BOT">
      <data name="Constructs" format="csv" from_work_dir="out/dnabot_in/constructs.csv" />
      <data name="Linker parts coords" format="csv" from_work_dir="out/dnabot_in/linker_parts_coords.csv" />
      <data name="User parts coords" format="csv" from_work_dir="out/dnabot_in/user_parts_coords.csv" />
    </collection>
    <collection type="list" format="xml" name="sbol_dir" label="SBOL depictions of constructs">
      <data name="Construct_A1" format="xml" from_work_dir="out/sbol_export/BASIC_construct_A1.xml" />
      <data name="Construct_A2" format="xml" from_work_dir="out/sbol_export/BASIC_construct_A2.xml" />
      <data name="Construct_A3" format="xml" from_work_dir="out/sbol_export/BASIC_construct_A3.xml" />
    </collection>
<!--    <collection type="list" format="csv" name="dnabot_dir" label="Dataset for DNA-BOT">-->
<!--      <discover_datasets pattern="__name_and_ext__" directory="out/dnabot_in" ext="csv" />-->
<!--    </collection>-->
    <data  name="output directory" format="directory" />
  </outputs>
  <help><![CDATA[
        usage: python -m dnaprep.cli [-h] --rpsbml_file RPSBML_FILE
                             [--linker_parts_file LINKER_PARTS_FILE]
                             [--linker_plate_file LINKER_PLATE_FILE]
                             [--user_parts_file USER_PARTS_FILE]
                             [--monocistronic MONOCISTRONIC] [--lms_id LMS_ID]
                             [--lmp_id LMP_ID] [--backbone_id BACKBONE_ID]
                             [--sample_size SAMPLE_SIZE]
                             [--o_dnabot_dir O_DNABOT_DIR]
                             [--o_sbol_dir O_SBOL_DIR]

Convert rpSBML enzyme info in to BASIC construct. UniProt IDs corresponding
enzyme variants are extracted from rpSBMl files. Promoters and RBSs are
randomly chosen from a default list. CDSs, in other words gene variants, of
enzymes are randomly chosen from amongst the UniProt IDs extracted. Constructs
generated can be stored as (i) a CSV file ready to be used by DNA-Bot, (ii) as
SBOL files.

optional arguments:
  -h, --help            show this help message and exit
  --rpsbml_file RPSBML_FILE
                        rpSBML file from which enzymes UniProt IDs will be
                        collected
  --linker_parts_file LINKER_PARTS_FILE
                        File listing available linkers for constructs.
  --linker_plate_file LINKER_PLATE_FILE
                        File providing half linkers coordinates.
  --user_parts_file USER_PARTS_FILE
                        File listing user parts (eg backbone, promoters)
                        available for constructs.
  --monocistronic MONOCISTRONIC
                        Build monocistronic constructs. Default to false, ie
                        polycistronic constructs will be generated.
  --lms_id LMS_ID       part ID to be used as the LMS methylated linker
  --lmp_id LMP_ID       part ID to be used as the LMP methylated linker
  --backbone_id BACKBONE_ID
                        part ID to be used as the backbone
  --sample_size SAMPLE_SIZE
                        Number of construct to generate.
  --o_dnabot_dir O_DNABOT_DIR
                        Output folder to write construct and coord part files.
                        It will be created if it does not exist yet. Existing
                        files will be overwritten. Default: out/dnabot_in
  --o_sbol_dir O_SBOL_DIR
                        Output folder to write SBOL depictions of constructs.
                        It will be created if it does not exist yet. Existing
                        files will be overwritten. Default: out/sbol_export

  ]]></help>
  <citations>
    <citation type="bibtex">
      @article{10.1093/synbio/ysaa010,
          author = {Storch, Marko and Haines, Matthew C and Baldwin, Geoff S},
          title = {DNA-BOT: a low-cost, automated DNA assembly platform for synthetic biology},
          journal = {Synthetic Biology},
          volume = {5},
          number = {1},
          year = {2020},
          month = {07},
          issn = {2397-7000},
          doi = {10.1093/synbio/ysaa010},
          url = {https://doi.org/10.1093/synbio/ysaa010},
          note = {ysaa010},
          eprint = {https://academic.oup.com/synbio/article-pdf/5/1/ysaa010/33722340/ysaa010.pdf},
      }
    </citation>
  </citations>
</tool>
